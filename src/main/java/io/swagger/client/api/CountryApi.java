/**
 * Fax.to REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CountryApi {
  String basePath = "https://fax.to/api/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * This API get areacodes . 
   * @param countryCode countryCode in the Country
   * @param stateId stateId in the Country
   * @return void
  */
  public void areacodesCountryCodeStateIdGet (String countryCode, String stateId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling areacodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling areacodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'stateId' is set
    if (stateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateId' when calling areacodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'stateId' when calling areacodesCountryCodeStateIdGet"));
    }

    // create path and map variables
    String path = "/areacodes/{countryCode}/{stateId}".replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString())).replaceAll("\\{" + "stateId" + "\\}", apiInvoker.escapeString(stateId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get areacodes . 
   * @param countryCode countryCode in the Country   * @param stateId stateId in the Country
  */
  public void areacodesCountryCodeStateIdGet (String countryCode, String stateId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling areacodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling areacodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'stateId' is set
    if (stateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateId' when calling areacodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'stateId' when calling areacodesCountryCodeStateIdGet"));
    }

    // create path and map variables
    String path = "/areacodes/{countryCode}/{stateId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString())).replaceAll("\\{" + "stateId" + "\\}", apiInvoker.escapeString(stateId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API didgroups countryCode. 
   * @param countryCode countryCode in the Country
   * @param didGroupIds didGroupId in the Country
   * @param stateId stateId in the Country
   * @param cityNamePattern cityNamePattern in the Country
   * @return void
  */
  public void countriesCountryCodeDidgroupsGet (String countryCode, String didGroupIds, String stateId, String cityNamePattern) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'didGroupIds' is set
    if (didGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupIds' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'didGroupIds' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'stateId' is set
    if (stateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateId' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'stateId' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'cityNamePattern' is set
    if (cityNamePattern == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityNamePattern' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'cityNamePattern' when calling countriesCountryCodeDidgroupsGet"));
    }

    // create path and map variables
    String path = "/countries/{countryCode}/didgroups".replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "didGroupIds", didGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stateId", stateId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cityNamePattern", cityNamePattern));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API didgroups countryCode. 
   * @param countryCode countryCode in the Country   * @param didGroupIds didGroupId in the Country   * @param stateId stateId in the Country   * @param cityNamePattern cityNamePattern in the Country
  */
  public void countriesCountryCodeDidgroupsGet (String countryCode, String didGroupIds, String stateId, String cityNamePattern, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'didGroupIds' is set
    if (didGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupIds' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'didGroupIds' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'stateId' is set
    if (stateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateId' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'stateId' when calling countriesCountryCodeDidgroupsGet"));
    }
    // verify the required parameter 'cityNamePattern' is set
    if (cityNamePattern == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityNamePattern' when calling countriesCountryCodeDidgroupsGet",
        new ApiException(400, "Missing the required parameter 'cityNamePattern' when calling countriesCountryCodeDidgroupsGet"));
    }

    // create path and map variables
    String path = "/countries/{countryCode}/didgroups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "didGroupIds", didGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stateId", stateId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cityNamePattern", cityNamePattern));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API didgroups provision. 
   * @param didGroupId didGroupId in the Country
   * @return void
  */
  public void countriesDidgroupsDidGroupIdProvisionPost (String didGroupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'didGroupId' is set
    if (didGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupId' when calling countriesDidgroupsDidGroupIdProvisionPost",
        new ApiException(400, "Missing the required parameter 'didGroupId' when calling countriesDidgroupsDidGroupIdProvisionPost"));
    }

    // create path and map variables
    String path = "/countries/didgroups/{didGroupId}/provision".replaceAll("\\{" + "didGroupId" + "\\}", apiInvoker.escapeString(didGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API didgroups provision. 
   * @param didGroupId didGroupId in the Country
  */
  public void countriesDidgroupsDidGroupIdProvisionPost (String didGroupId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'didGroupId' is set
    if (didGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupId' when calling countriesDidgroupsDidGroupIdProvisionPost",
        new ApiException(400, "Missing the required parameter 'didGroupId' when calling countriesDidgroupsDidGroupIdProvisionPost"));
    }

    // create path and map variables
    String path = "/countries/didgroups/{didGroupId}/provision".replaceAll("\\{format\\}","json").replaceAll("\\{" + "didGroupId" + "\\}", apiInvoker.escapeString(didGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API get countries. 
   * @return void
  */
  public void countriesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/countries";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get countries. 

  */
  public void countriesGet (final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/countries".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API get States . 
   * @param countryCode countryCode in the Country
   * @return void
  */
  public void statesCountryCodeGet (String countryCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling statesCountryCodeGet"));
    }

    // create path and map variables
    String path = "/states/{countryCode}".replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get States . 
   * @param countryCode countryCode in the Country
  */
  public void statesCountryCodeGet (String countryCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCode' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'countryCode' when calling statesCountryCodeGet"));
    }

    // create path and map variables
    String path = "/states/{countryCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "countryCode" + "\\}", apiInvoker.escapeString(countryCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
