/**
 * Fax.to REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import java.io.File;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class FaxApi {
  String basePath = "https://fax.to/api/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * This API get the cost of a sending fax. 
   * @param apiKey API Key
   * @param faxNumber Fax Number
   * @param documentId id of the file / document_id
   * @return void
  */
  public void faxDocumentIdCostsGet (String apiKey, String faxNumber, BigDecimal documentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxDocumentIdCostsGet"));
    }
    // verify the required parameter 'faxNumber' is set
    if (faxNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'faxNumber' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'faxNumber' when calling faxDocumentIdCostsGet"));
    }
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentId' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'documentId' when calling faxDocumentIdCostsGet"));
    }

    // create path and map variables
    String path = "/fax/{document_id}/costs".replaceAll("\\{" + "document_id" + "\\}", apiInvoker.escapeString(documentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fax_number", faxNumber));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get the cost of a sending fax. 
   * @param apiKey API Key   * @param faxNumber Fax Number   * @param documentId id of the file / document_id
  */
  public void faxDocumentIdCostsGet (String apiKey, String faxNumber, BigDecimal documentId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxDocumentIdCostsGet"));
    }
    // verify the required parameter 'faxNumber' is set
    if (faxNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'faxNumber' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'faxNumber' when calling faxDocumentIdCostsGet"));
    }
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentId' when calling faxDocumentIdCostsGet",
        new ApiException(400, "Missing the required parameter 'documentId' when calling faxDocumentIdCostsGet"));
    }

    // create path and map variables
    String path = "/fax/{document_id}/costs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "document_id" + "\\}", apiInvoker.escapeString(documentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fax_number", faxNumber));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API get all fax history. 
   * @param apiKey API Key
   * @param limit Number of records to return
   * @param page Page to display
   * @return void
  */
  public void faxHistoryGet (String apiKey, String limit, String page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxHistoryGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxHistoryGet"));
    }

    // create path and map variables
    String path = "/fax-history";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get all fax history. 
   * @param apiKey API Key   * @param limit Number of records to return   * @param page Page to display
  */
  public void faxHistoryGet (String apiKey, String limit, String page, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxHistoryGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxHistoryGet"));
    }

    // create path and map variables
    String path = "/fax-history".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API get the status of the fax. 
   * @param apiKey API Key
   * @param jobId id of the fax job
   * @return void
  */
  public void faxJobIdStatusGet (String apiKey, BigDecimal jobId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxJobIdStatusGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling faxJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling faxJobIdStatusGet"));
    }

    // create path and map variables
    String path = "/fax/{job_id}/status".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API get the status of the fax. 
   * @param apiKey API Key   * @param jobId id of the fax job
  */
  public void faxJobIdStatusGet (String apiKey, BigDecimal jobId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxJobIdStatusGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling faxJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling faxJobIdStatusGet"));
    }

    // create path and map variables
    String path = "/fax/{job_id}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
   * @param apiKey API Key
   * @param faxNumber Fax Number
   * @param documentId Document id. If you want to use existing document you need to specify the document_id
   * @param tsiNumber If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax
   * @param file PDF file to upload
   * @param deleteFile Whether to delete file after fax transaction. (put 1 to delete)
   * @return void
  */
  public void faxPost (String apiKey, String faxNumber, Integer documentId, String tsiNumber, File file, Integer deleteFile) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxPost",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxPost"));
    }
    // verify the required parameter 'faxNumber' is set
    if (faxNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'faxNumber' when calling faxPost",
        new ApiException(400, "Missing the required parameter 'faxNumber' when calling faxPost"));
    }

    // create path and map variables
    String path = "/fax";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (faxNumber != null) {
        localVarBuilder.addTextBody("fax_number", ApiInvoker.parameterToString(faxNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (documentId != null) {
        localVarBuilder.addTextBody("document_id", ApiInvoker.parameterToString(documentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (tsiNumber != null) {
        localVarBuilder.addTextBody("tsi_number", ApiInvoker.parameterToString(tsiNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (deleteFile != null) {
        localVarBuilder.addTextBody("delete_file", ApiInvoker.parameterToString(deleteFile), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("fax_number", ApiInvoker.parameterToString(faxNumber));
      formParams.put("document_id", ApiInvoker.parameterToString(documentId));
      formParams.put("tsi_number", ApiInvoker.parameterToString(tsiNumber));
      formParams.put("delete_file", ApiInvoker.parameterToString(deleteFile));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
   * @param apiKey API Key   * @param faxNumber Fax Number   * @param documentId Document id. If you want to use existing document you need to specify the document_id   * @param tsiNumber If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax   * @param file PDF file to upload   * @param deleteFile Whether to delete file after fax transaction. (put 1 to delete)
  */
  public void faxPost (String apiKey, String faxNumber, Integer documentId, String tsiNumber, File file, Integer deleteFile, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling faxPost",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling faxPost"));
    }
    // verify the required parameter 'faxNumber' is set
    if (faxNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'faxNumber' when calling faxPost",
        new ApiException(400, "Missing the required parameter 'faxNumber' when calling faxPost"));
    }

    // create path and map variables
    String path = "/fax".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "api_key", apiKey));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (faxNumber != null) {
        localVarBuilder.addTextBody("fax_number", ApiInvoker.parameterToString(faxNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (documentId != null) {
        localVarBuilder.addTextBody("document_id", ApiInvoker.parameterToString(documentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (tsiNumber != null) {
        localVarBuilder.addTextBody("tsi_number", ApiInvoker.parameterToString(tsiNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (deleteFile != null) {
        localVarBuilder.addTextBody("delete_file", ApiInvoker.parameterToString(deleteFile), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("fax_number", ApiInvoker.parameterToString(faxNumber));
formParams.put("document_id", ApiInvoker.parameterToString(documentId));
formParams.put("tsi_number", ApiInvoker.parameterToString(tsiNumber));

formParams.put("delete_file", ApiInvoker.parameterToString(deleteFile));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
